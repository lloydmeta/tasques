// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecurringTaskUpdate recurring task update
// swagger:model recurring.TaskUpdate
type RecurringTaskUpdate struct {

	// A schedule expression; can be any valid cron expression, with some support for simple macros
	// If not defined, reuses the existing one on the recurring Task
	ScheduleExpression string `json:"schedule_expression,omitempty"`

	// The Task to insert at intervals defined by ScheduleExpression
	// If not defined, reuses the existing one on the recurring Task
	TaskDefinition *RecurringTaskDefinition `json:"task_definition,omitempty"`
}

// Validate validates this recurring task update
func (m *RecurringTaskUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTaskDefinition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecurringTaskUpdate) validateTaskDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskDefinition) { // not required
		return nil
	}

	if m.TaskDefinition != nil {
		if err := m.TaskDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("task_definition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecurringTaskUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecurringTaskUpdate) UnmarshalBinary(b []byte) error {
	var res RecurringTaskUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
