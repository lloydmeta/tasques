// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecurringTask recurring task
// swagger:model recurring.Task
type RecurringTask struct {

	// User-defined Id for the recurring Task. Must not collide with other existing ones.
	// Required: true
	ID *string `json:"id"`

	// When this recurring Task was last acknoledged and _loaded_ by a Tasques server for later
	// automatic enqueueing
	LoadedAt string `json:"loaded_at,omitempty"`

	// Metadata (data about data)
	// Required: true
	Metadata *CommonMetadata `json:"metadata"`

	// A schedule expression; can be any valid cron expression, with some support for simple macros
	// Required: true
	ScheduleExpression *string `json:"schedule_expression"`

	// The Task to insert at intervals defined by ScheduleExpression
	// Required: true
	TaskDefinition *RecurringTaskDefinition `json:"task_definition"`
}

// Validate validates this recurring task
func (m *RecurringTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleExpression(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskDefinition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecurringTask) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *RecurringTask) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("metadata", "body", m.Metadata); err != nil {
		return err
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *RecurringTask) validateScheduleExpression(formats strfmt.Registry) error {

	if err := validate.Required("schedule_expression", "body", m.ScheduleExpression); err != nil {
		return err
	}

	return nil
}

func (m *RecurringTask) validateTaskDefinition(formats strfmt.Registry) error {

	if err := validate.Required("task_definition", "body", m.TaskDefinition); err != nil {
		return err
	}

	if m.TaskDefinition != nil {
		if err := m.TaskDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("task_definition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecurringTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecurringTask) UnmarshalBinary(b []byte) error {
	var res RecurringTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
