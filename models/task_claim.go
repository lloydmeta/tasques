// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskClaim task claim
// swagger:model task.Claim
type TaskClaim struct {

	// How many Tasks to try to claim
	Amount int64 `json:"amount,omitempty"`

	// How long to block for before retrying, if the specified amount cannot be claimed.
	// If not passed, falls back to a server-side configured default
	BlockFor string `json:"block_for,omitempty"`

	// The Task queues to claim from
	// Required: true
	Queues []string `json:"queues"`
}

// Validate validates this task claim
func (m *TaskClaim) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQueues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskClaim) validateQueues(formats strfmt.Registry) error {

	if err := validate.Required("queues", "body", m.Queues); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskClaim) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskClaim) UnmarshalBinary(b []byte) error {
	var res TaskClaim
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
