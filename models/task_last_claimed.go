// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskLastClaimed task last claimed
// swagger:model task.LastClaimed
type TaskLastClaimed struct {

	// When the claim was made
	// Required: true
	// Format: date-time
	ClaimedAt *strfmt.DateTime `json:"claimed_at"`

	// The LastReport filed by a worker holding a claim on the Task
	LastReport *TaskReport `json:"last_report,omitempty"`

	// The processing Result
	Result *TaskResult `json:"result,omitempty"`

	// When the Task will be timed out if the worker doesn't finish or report back
	// Required: true
	// Format: date-time
	TimesOutAt *strfmt.DateTime `json:"times_out_at"`

	// Id belonging to a worker that claimed the Task
	// Required: true
	WorkerID *string `json:"worker_id"`
}

// Validate validates this task last claimed
func (m *TaskLastClaimed) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClaimedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimesOutAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskLastClaimed) validateClaimedAt(formats strfmt.Registry) error {

	if err := validate.Required("claimed_at", "body", m.ClaimedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("claimed_at", "body", "date-time", m.ClaimedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskLastClaimed) validateLastReport(formats strfmt.Registry) error {

	if swag.IsZero(m.LastReport) { // not required
		return nil
	}

	if m.LastReport != nil {
		if err := m.LastReport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_report")
			}
			return err
		}
	}

	return nil
}

func (m *TaskLastClaimed) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(m.Result) { // not required
		return nil
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

func (m *TaskLastClaimed) validateTimesOutAt(formats strfmt.Registry) error {

	if err := validate.Required("times_out_at", "body", m.TimesOutAt); err != nil {
		return err
	}

	if err := validate.FormatOf("times_out_at", "body", "date-time", m.TimesOutAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TaskLastClaimed) validateWorkerID(formats strfmt.Registry) error {

	if err := validate.Required("worker_id", "body", m.WorkerID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskLastClaimed) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskLastClaimed) UnmarshalBinary(b []byte) error {
	var res TaskLastClaimed
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
