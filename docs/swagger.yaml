basePath: /
definitions:
  common.Body:
    properties:
      message:
        description: The error message
        example: Something went wrong :(
        type: string
    required:
    - message
    type: object
  common.Metadata:
    properties:
      created_at:
        description: When the data was created
        format: date-time
        type: string
      modified_at:
        description: When the data was last modified
        format: date-time
        type: string
      version:
        $ref: '#/definitions/common.Version'
        description: Data versioning information
        type: object
    type: object
  common.Version:
    properties:
      primary_term:
        type: integer
      seq_num:
        type: integer
    type: object
  recurring.NewTask:
    properties:
      id:
        description: User-definable Id for the recurring Task. Must not collide with
          other existing ones.
        example: repeat-every-minute
        type: string
      schedule_expression:
        description: A schedule expression; can be any valid cron expression, with
          some support for simple macros
        example: '@every 1m'
        type: string
      task_definition:
        $ref: '#/definitions/recurring.TaskDefinition'
        description: The Task to insert at intervals defined by ScheduleExpression
        type: object
    required:
    - id
    - schedule_expression
    - task_definition
    type: object
  recurring.Task:
    properties:
      id:
        description: User-defined Id for the recurring Task. Must not collide with
          other existing ones.
        example: repeat-every-minute
        type: string
      loaded_at:
        description: |-
          When this recurring Task was last acknoledged and _loaded_ by a Tasques server for later
          automatic enqueueing
        type: string
      metadata:
        $ref: '#/definitions/common.Metadata'
        description: Metadata (data about data)
        type: object
      schedule_expression:
        description: A schedule expression; can be any valid cron expression, with
          some support for simple macros
        example: '@every 1m'
        type: string
      task_definition:
        $ref: '#/definitions/recurring.TaskDefinition'
        description: The Task to insert at intervals defined by ScheduleExpression
        type: object
    required:
    - id
    - metadata
    - schedule_expression
    - task_definition
    type: object
  recurring.TaskDefinition:
    properties:
      args:
        description: Arguments for this Task
        type: object
      context:
        description: Context for this Task
        type: object
      kind:
        description: The kind of Task; corresponds roughly with a function name
        example: sayHello
        type: string
      priority:
        description: |-
          The priority of this Task (higher means higher priority)
          If not passed, defaults to zero (neutral)
        type: integer
      processing_timeout:
        description: |-
          How long a Worker has upon claiming this Task to finish or report back before it gets timed out by the Tasques server
          If not passed, falls back to a server-side configured default
        example: 30m
        type: string
      queue:
        description: The queue that a Task will be inserted into
        example: run-later
        type: string
      retry_times:
        description: |-
          The number of times that a Task will be retried if it fails
          If not passed, falls back to a server-side configured default
        example: 10
        type: integer
    required:
    - kind
    - queue
    type: object
  recurring.TaskUpdate:
    properties:
      schedule_expression:
        description: |-
          A schedule expression; can be any valid cron expression, with some support for simple macros
          If not defined, reuses the existing one on the recurring Task
        example: '@every 1m'
        type: string
      task_definition:
        $ref: '#/definitions/recurring.TaskDefinition'
        description: |-
          The Task to insert at intervals defined by ScheduleExpression
          If not defined, reuses the existing one on the recurring Task
        type: object
    type: object
  task.Args:
    $ref: '#/definitions/task.JsonObj'
  task.Claim:
    properties:
      amount:
        description: How many Tasks to try to claim
        example: 1
        type: integer
      block_for:
        description: |-
          How long to block for before retrying, if the specified amount cannot be claimed.
          If not passed, falls back to a server-side configured default
        example: 1s
        type: string
      queues:
        description: The Task queues to claim from
        example:
        - run-later
        - resize-images
        items:
          type: string
        type: array
    required:
    - queues
    type: object
  task.Context:
    $ref: '#/definitions/task.JsonObj'
  task.Failure:
    properties:
      data:
        type: object
    type: object
  task.JsonObj:
    additionalProperties: true
    type: object
  task.LastClaimed:
    properties:
      claimed_at:
        description: When the claim was made
        format: date-time
        type: string
      last_report:
        $ref: '#/definitions/task.Report'
        description: The LastReport filed by a worker holding a claim on the Task
        type: object
      result:
        $ref: '#/definitions/task.Result'
        description: The processing Result
        type: object
      times_out_at:
        description: When the Task will be timed out if the worker doesn't finish
          or report back
        format: date-time
        type: string
      worker_id:
        description: Id belonging to a worker that claimed the Task
        type: string
    required:
    - claimed_at
    - times_out_at
    - worker_id
    type: object
  task.NewReport:
    properties:
      data:
        $ref: '#/definitions/task.ReportedData'
        description: Optional data for the report
        type: object
    type: object
  task.NewTask:
    properties:
      args:
        description: Arguments for this Task
        type: object
      context:
        description: Context for this Task
        type: object
      kind:
        description: The kind of Task; corresponds roughly with a function name
        example: sayHello
        type: string
      priority:
        description: |-
          The priority of this Task (higher means higher priority)
          If not passed, defaults to zero (neutral)
        type: integer
      processing_timeout:
        description: |-
          How long a Worker has upon claiming this Task to finish or report back before it gets timed out by the Tasques server
          If not passed, falls back to a server-side configured default
        example: 30m
        type: string
      queue:
        description: The queue that a Task will be inserted into
        example: run-later
        type: string
      retry_times:
        description: |-
          The number of times that a Task will be retried if it fails
          If not passed, falls back to a server-side configured default
        example: 10
        type: integer
      run_at:
        description: |-
          If defined, when this Task should run
          If not passed, falls back to now.
        format: date-time
        type: string
    required:
    - kind
    - queue
    type: object
  task.Report:
    properties:
      at:
        description: When the report was filed
        format: date-time
        type: string
      data:
        description: Optional report data
        type: object
    required:
    - at
    type: object
  task.ReportedData:
    $ref: '#/definitions/task.JsonObj'
  task.Result:
    properties:
      at:
        description: When the Result was produced
        format: date-time
        type: string
      failure:
        description: Failure
        type: object
      success:
        description: Success
        type: object
    required:
    - at
    type: object
  task.Success:
    properties:
      data:
        type: object
    type: object
  task.Task:
    properties:
      args:
        description: Arguments for this Task
        type: object
      attempted:
        description: The number of times a Task has been attempted
        type: integer
      context:
        description: Context for this Task
        type: object
      id:
        description: Unique identifier of a Task
        type: string
      kind:
        description: The kind of Task; corresponds roughly with a function name
        example: sayHello
        type: string
      last_claimed:
        $ref: '#/definitions/task.LastClaimed'
        description: Information on when this Task was last claimed by a worker
        type: object
      last_enqueued_at:
        description: When this Task was last enqueued
        format: date-time
        type: string
      metadata:
        $ref: '#/definitions/common.Metadata'
        description: Metadata (data about data)
        type: object
      priority:
        description: The priority of this Task (higher means higher priority)
        type: integer
      processing_timeout:
        description: How long a Worker has upon claiming this Task to finish or report
          back before it gets timed out by the Tasques server
        example: 30m
        type: string
      queue:
        description: The queue the Task is in
        example: run-later
        type: string
      recurring_task_id:
        description: Only populated if this is a Task that was spawned/enqueued by
          a Recurring Task definition
        type: string
      retry_times:
        description: The number of times that a Task will be retried if it fails
        example: 10
        type: integer
      run_at:
        description: When this Task should run
        format: date-time
        type: string
      state:
        description: The state of a Task
        example: queued
        type: string
    required:
    - attempted
    - id
    - kind
    - last_enqueued_at
    - metadata
    - priority
    - processing_timeout
    - queue
    - retry_times
    - run_at
    - state
    type: object
host: localhost:8080
info:
  contact: {}
  description: A Task queue backed by Elasticsearch
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Tasques API
  version: 0.0.1
paths:
  /recurring_tasques:
    get:
      consumes:
      - application/json
      description: Lists persisted Recurring Tasks
      operationId: list-existing-recurring-tasks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/recurring.Task'
            type: array
      summary: List Recurring Tasks
      tags:
      - recurring-tasks
    post:
      consumes:
      - application/json
      description: Creates a new Recurring Task
      operationId: create-recurring-task
      parameters:
      - description: The request body
        in: body
        name: newRecurringTask
        required: true
        schema:
          $ref: '#/definitions/recurring.NewTask'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/recurring.Task'
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/common.Body'
        "409":
          description: Id in use
          schema:
            $ref: '#/definitions/common.Body'
      summary: Add a new Recurring Task
      tags:
      - recurring-tasks
  /recurring_tasques/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a persisted Recurring Task
      operationId: delete-existing-recurring-task
      parameters:
      - description: The id of the Recurring Task
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/recurring.Task'
        "404":
          description: Recurring Task does not exist
          schema:
            $ref: '#/definitions/common.Body'
      summary: Delete a Recurring Task
      tags:
      - recurring-tasks
    get:
      consumes:
      - application/json
      description: Retrieves a persisted Recurring Task
      operationId: get-existing-recurring-task
      parameters:
      - description: The id of the Recurring Task
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/recurring.Task'
        "404":
          description: Recurring Task does not exist
          schema:
            $ref: '#/definitions/common.Body'
      summary: Get a Recurring Task
      tags:
      - recurring-tasks
    put:
      consumes:
      - application/json
      description: Updates a persisted Recurring Task
      operationId: update-existing-recurring-task
      parameters:
      - description: The id of the Recurring Task
        in: path
        name: id
        required: true
        type: string
      - description: The request body
        in: body
        name: recurringTaskUpdate
        required: true
        schema:
          $ref: '#/definitions/recurring.TaskUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/recurring.Task'
        "404":
          description: Recurring Task does not exist
          schema:
            $ref: '#/definitions/common.Body'
      summary: Update a Recurring Task
      tags:
      - recurring-tasks
  /tasques:
    post:
      consumes:
      - application/json
      description: Creates a new Task
      operationId: create-task
      parameters:
      - description: The request body
        in: body
        name: newTask
        required: true
        schema:
          $ref: '#/definitions/task.NewTask'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/task.Task'
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/common.Body'
      summary: Add a new Task
      tags:
      - tasks
  /tasques/{queue}/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a persisted Task
      operationId: get-existing-task
      parameters:
      - description: The Queue of the Task
        in: path
        name: queue
        required: true
        type: string
      - description: The id of the Task
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/task.Task'
        "404":
          description: Task does not exist
          schema:
            $ref: '#/definitions/common.Body'
      summary: Get a Task
      tags:
      - tasks
  /tasques/claims:
    post:
      consumes:
      - application/json
      description: Claims a number of existing Tasks.
      operationId: claim-tasks
      parameters:
      - description: Worker ID
        in: header
        name: X-TASQUES-WORKER-ID
        required: true
        type: string
      - description: The request body
        in: body
        name: claim
        required: true
        schema:
          $ref: '#/definitions/task.Claim'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/task.Task'
            type: array
      summary: Claims a number of Tasks
      tags:
      - tasks
  /tasques/claims/{queue}/{id}:
    delete:
      consumes:
      - application/json
      description: Unclaims a claimed Task.
      operationId: unclaim-existing-task
      parameters:
      - description: The Queue of the Task
        in: path
        name: queue
        required: true
        type: string
      - description: The id of the Task
        in: path
        name: id
        required: true
        type: string
      - description: Worker ID
        in: header
        name: X-TASQUES-WORKER-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/task.Task'
        "400":
          description: The Task is not currently claimed
          schema:
            $ref: '#/definitions/common.Body'
        "403":
          description: Worker currently has not claimed the Task
          schema:
            $ref: '#/definitions/common.Body'
        "404":
          description: Task does not exist
          schema:
            $ref: '#/definitions/common.Body'
      summary: Unclaims a Task
      tags:
      - tasks
  /tasques/done/{queue}/{id}:
    put:
      consumes:
      - application/json
      description: Marks a claimed Task as done.
      operationId: mark-claimed-task-done
      parameters:
      - description: The request body
        in: body
        name: success
        required: true
        schema:
          $ref: '#/definitions/task.Success'
      - description: The Queue of the Task
        in: path
        name: queue
        required: true
        type: string
      - description: The id of the Task
        in: path
        name: id
        required: true
        type: string
      - description: Worker ID
        in: header
        name: X-TASQUES-WORKER-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/task.Task'
        "400":
          description: The Task is not currently claimed
          schema:
            $ref: '#/definitions/common.Body'
        "403":
          description: Worker currently has not claimed the Task
          schema:
            $ref: '#/definitions/common.Body'
        "404":
          description: Task does not exist
          schema:
            $ref: '#/definitions/common.Body'
      summary: Mark Task as Done
      tags:
      - tasks
  /tasques/failed/{queue}/{id}:
    put:
      consumes:
      - application/json
      description: Marks a claimed Task as failed.
      operationId: mark-claimed-task-failed
      parameters:
      - description: The request body
        in: body
        name: failure
        required: true
        schema:
          $ref: '#/definitions/task.Failure'
      - description: The Queue of the Task
        in: path
        name: queue
        required: true
        type: string
      - description: The id of the Task
        in: path
        name: id
        required: true
        type: string
      - description: Worker ID
        in: header
        name: X-TASQUES-WORKER-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/task.Task'
        "400":
          description: The Task is not currently claimed
          schema:
            $ref: '#/definitions/common.Body'
        "403":
          description: Worker currently has not claimed the Task
          schema:
            $ref: '#/definitions/common.Body'
        "404":
          description: Task does not exist
          schema:
            $ref: '#/definitions/common.Body'
      summary: Mark Task as Failed
      tags:
      - tasks
  /tasques/reports/{queue}/{id}:
    put:
      consumes:
      - application/json
      description: Reports in on a claimed Task.
      operationId: report-on-claimed-task
      parameters:
      - description: The request body
        in: body
        name: newReport
        required: true
        schema:
          $ref: '#/definitions/task.NewReport'
      - description: The Queue of the Task
        in: path
        name: queue
        required: true
        type: string
      - description: The id of the Task
        in: path
        name: id
        required: true
        type: string
      - description: Worker ID
        in: header
        name: X-TASQUES-WORKER-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/task.Task'
        "400":
          description: The Task is not currently claimed
          schema:
            $ref: '#/definitions/common.Body'
        "403":
          description: Worker currently has not claimed the Task
          schema:
            $ref: '#/definitions/common.Body'
        "404":
          description: Task does not exist
          schema:
            $ref: '#/definitions/common.Body'
      summary: Reports on a Task
      tags:
      - tasks
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
