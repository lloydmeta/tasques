{
    "swagger": "2.0",
    "info": {
        "description": "A Task queue backed by Elasticsearch",
        "title": "Tasques API",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "0.0.1"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/recurring_tasques": {
            "get": {
                "description": "Lists persisted Recurring Tasks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recurring-tasks"
                ],
                "summary": "List Recurring Tasks",
                "operationId": "list-existing-recurring-tasks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/recurring.Task"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new Recurring Task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recurring-tasks"
                ],
                "summary": "Add a new Recurring Task",
                "operationId": "create-recurring-task",
                "parameters": [
                    {
                        "description": "The request body",
                        "name": "newRecurringTask",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/recurring.NewTask"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/recurring.Task"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    },
                    "409": {
                        "description": "Id in use",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    }
                }
            }
        },
        "/recurring_tasques/{id}": {
            "get": {
                "description": "Retrieves a persisted Recurring Task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recurring-tasks"
                ],
                "summary": "Get a Recurring Task",
                "operationId": "get-existing-recurring-task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the Recurring Task",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/recurring.Task"
                        }
                    },
                    "404": {
                        "description": "Recurring Task does not exist",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates a persisted Recurring Task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recurring-tasks"
                ],
                "summary": "Update a Recurring Task",
                "operationId": "update-existing-recurring-task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the Recurring Task",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body",
                        "name": "recurringTaskUpdate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/recurring.TaskUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/recurring.Task"
                        }
                    },
                    "404": {
                        "description": "Recurring Task does not exist",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a persisted Recurring Task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recurring-tasks"
                ],
                "summary": "Delete a Recurring Task",
                "operationId": "delete-existing-recurring-task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the Recurring Task",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/recurring.Task"
                        }
                    },
                    "404": {
                        "description": "Recurring Task does not exist",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    }
                }
            }
        },
        "/tasques": {
            "post": {
                "description": "Creates a new Task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Add a new Task",
                "operationId": "create-task",
                "parameters": [
                    {
                        "description": "The request body",
                        "name": "newTask",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/task.NewTask"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/task.Task"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    }
                }
            }
        },
        "/tasques/claims": {
            "post": {
                "description": "Claims a number of existing Tasks.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Claims a number of Tasks",
                "operationId": "claim-tasks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Worker ID",
                        "name": "X-TASQUES-WORKER-ID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "The request body",
                        "name": "claim",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/task.Claim"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/task.Task"
                            }
                        }
                    }
                }
            }
        },
        "/tasques/claims/{queue}/{id}": {
            "delete": {
                "description": "Unclaims a claimed Task.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Unclaims a Task",
                "operationId": "unclaim-existing-task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Queue of the Task",
                        "name": "queue",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the Task",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Worker ID",
                        "name": "X-TASQUES-WORKER-ID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/task.Task"
                        }
                    },
                    "400": {
                        "description": "The Task is not currently claimed",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    },
                    "403": {
                        "description": "Worker currently has not claimed the Task",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    },
                    "404": {
                        "description": "Task does not exist",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    }
                }
            }
        },
        "/tasques/done/{queue}/{id}": {
            "put": {
                "description": "Marks a claimed Task as done.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Mark Task as Done",
                "operationId": "mark-claimed-task-done",
                "parameters": [
                    {
                        "description": "The request body",
                        "name": "success",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/task.Success"
                        }
                    },
                    {
                        "type": "string",
                        "description": "The Queue of the Task",
                        "name": "queue",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the Task",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Worker ID",
                        "name": "X-TASQUES-WORKER-ID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/task.Task"
                        }
                    },
                    "400": {
                        "description": "The Task is not currently claimed",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    },
                    "403": {
                        "description": "Worker currently has not claimed the Task",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    },
                    "404": {
                        "description": "Task does not exist",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    }
                }
            }
        },
        "/tasques/failed/{queue}/{id}": {
            "put": {
                "description": "Marks a claimed Task as failed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Mark Task as Failed",
                "operationId": "mark-claimed-task-failed",
                "parameters": [
                    {
                        "description": "The request body",
                        "name": "failure",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/task.Failure"
                        }
                    },
                    {
                        "type": "string",
                        "description": "The Queue of the Task",
                        "name": "queue",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the Task",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Worker ID",
                        "name": "X-TASQUES-WORKER-ID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/task.Task"
                        }
                    },
                    "400": {
                        "description": "The Task is not currently claimed",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    },
                    "403": {
                        "description": "Worker currently has not claimed the Task",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    },
                    "404": {
                        "description": "Task does not exist",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    }
                }
            }
        },
        "/tasques/reports/{queue}/{id}": {
            "put": {
                "description": "Reports in on a claimed Task.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Reports on a Task",
                "operationId": "report-on-claimed-task",
                "parameters": [
                    {
                        "description": "The request body",
                        "name": "newReport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/task.NewReport"
                        }
                    },
                    {
                        "type": "string",
                        "description": "The Queue of the Task",
                        "name": "queue",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the Task",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Worker ID",
                        "name": "X-TASQUES-WORKER-ID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/task.Task"
                        }
                    },
                    "400": {
                        "description": "The Task is not currently claimed",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    },
                    "403": {
                        "description": "Worker currently has not claimed the Task",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    },
                    "404": {
                        "description": "Task does not exist",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    }
                }
            }
        },
        "/tasques/{queue}/{id}": {
            "get": {
                "description": "Retrieves a persisted Task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get a Task",
                "operationId": "get-existing-task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Queue of the Task",
                        "name": "queue",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The id of the Task",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/task.Task"
                        }
                    },
                    "404": {
                        "description": "Task does not exist",
                        "schema": {
                            "$ref": "#/definitions/common.Body"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "common.Body": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "description": "The error message",
                    "type": "string",
                    "example": "Something went wrong :("
                }
            }
        },
        "common.Metadata": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "When the data was created",
                    "type": "string",
                    "format": "date-time"
                },
                "modified_at": {
                    "description": "When the data was last modified",
                    "type": "string",
                    "format": "date-time"
                },
                "version": {
                    "description": "Data versioning information",
                    "type": "object",
                    "$ref": "#/definitions/common.Version"
                }
            }
        },
        "common.Version": {
            "type": "object",
            "properties": {
                "primary_term": {
                    "type": "integer"
                },
                "seq_num": {
                    "type": "integer"
                }
            }
        },
        "recurring.NewTask": {
            "type": "object",
            "required": [
                "id",
                "schedule_expression",
                "task_definition"
            ],
            "properties": {
                "id": {
                    "description": "User-definable Id for the recurring Task. Must not collide with other existing ones.",
                    "type": "string",
                    "example": "repeat-every-minute"
                },
                "schedule_expression": {
                    "description": "A schedule expression; can be any valid cron expression, with some support for simple macros",
                    "type": "string",
                    "example": "@every 1m"
                },
                "task_definition": {
                    "description": "The Task to insert at intervals defined by ScheduleExpression",
                    "type": "object",
                    "$ref": "#/definitions/recurring.TaskDefinition"
                }
            }
        },
        "recurring.Task": {
            "type": "object",
            "required": [
                "id",
                "metadata",
                "schedule_expression",
                "task_definition"
            ],
            "properties": {
                "id": {
                    "description": "User-defined Id for the recurring Task. Must not collide with other existing ones.",
                    "type": "string",
                    "example": "repeat-every-minute"
                },
                "loaded_at": {
                    "description": "When this recurring Task was last acknoledged and _loaded_ by a Tasques server for later\nautomatic enqueueing",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata (data about data)",
                    "type": "object",
                    "$ref": "#/definitions/common.Metadata"
                },
                "schedule_expression": {
                    "description": "A schedule expression; can be any valid cron expression, with some support for simple macros",
                    "type": "string",
                    "example": "@every 1m"
                },
                "task_definition": {
                    "description": "The Task to insert at intervals defined by ScheduleExpression",
                    "type": "object",
                    "$ref": "#/definitions/recurring.TaskDefinition"
                }
            }
        },
        "recurring.TaskDefinition": {
            "type": "object",
            "required": [
                "kind",
                "queue"
            ],
            "properties": {
                "args": {
                    "description": "Arguments for this Task",
                    "type": "object"
                },
                "context": {
                    "description": "Context for this Task",
                    "type": "object"
                },
                "kind": {
                    "description": "The kind of Task; corresponds roughly with a function name",
                    "type": "string",
                    "example": "sayHello"
                },
                "priority": {
                    "description": "The priority of this Task (higher means higher priority)\nIf not passed, defaults to zero (neutral)",
                    "type": "integer"
                },
                "processing_timeout": {
                    "description": "How long a Worker has upon claiming this Task to finish or report back before it gets timed out by the Tasques server\nIf not passed, falls back to a server-side configured default",
                    "type": "string",
                    "example": "30m"
                },
                "queue": {
                    "description": "The queue that a Task will be inserted into",
                    "type": "string",
                    "example": "run-later"
                },
                "retry_times": {
                    "description": "The number of times that a Task will be retried if it fails\nIf not passed, falls back to a server-side configured default",
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "recurring.TaskUpdate": {
            "type": "object",
            "properties": {
                "schedule_expression": {
                    "description": "A schedule expression; can be any valid cron expression, with some support for simple macros\nIf not defined, reuses the existing one on the recurring Task",
                    "type": "string",
                    "example": "@every 1m"
                },
                "task_definition": {
                    "description": "The Task to insert at intervals defined by ScheduleExpression\nIf not defined, reuses the existing one on the recurring Task",
                    "type": "object",
                    "$ref": "#/definitions/recurring.TaskDefinition"
                }
            }
        },
        "task.Args": {
            "$ref": "#/definitions/task.JsonObj"
        },
        "task.Claim": {
            "type": "object",
            "required": [
                "queues"
            ],
            "properties": {
                "amount": {
                    "description": "How many Tasks to try to claim",
                    "type": "integer",
                    "example": 1
                },
                "block_for": {
                    "description": "How long to block for before retrying, if the specified amount cannot be claimed.\nIf not passed, falls back to a server-side configured default",
                    "type": "string",
                    "example": "1s"
                },
                "queues": {
                    "description": "The Task queues to claim from",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "run-later",
                        "resize-images"
                    ]
                }
            }
        },
        "task.Context": {
            "$ref": "#/definitions/task.JsonObj"
        },
        "task.Failure": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                }
            }
        },
        "task.JsonObj": {
            "type": "object",
            "additionalProperties": true
        },
        "task.LastClaimed": {
            "type": "object",
            "required": [
                "claimed_at",
                "times_out_at",
                "worker_id"
            ],
            "properties": {
                "claimed_at": {
                    "description": "When the claim was made",
                    "type": "string",
                    "format": "date-time"
                },
                "last_report": {
                    "description": "The LastReport filed by a worker holding a claim on the Task",
                    "type": "object",
                    "$ref": "#/definitions/task.Report"
                },
                "result": {
                    "description": "The processing Result",
                    "type": "object",
                    "$ref": "#/definitions/task.Result"
                },
                "times_out_at": {
                    "description": "When the Task will be timed out if the worker doesn't finish or report back",
                    "type": "string",
                    "format": "date-time"
                },
                "worker_id": {
                    "description": "Id belonging to a worker that claimed the Task",
                    "type": "string"
                }
            }
        },
        "task.NewReport": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Optional data for the report",
                    "type": "object",
                    "$ref": "#/definitions/task.ReportedData"
                }
            }
        },
        "task.NewTask": {
            "type": "object",
            "required": [
                "kind",
                "queue"
            ],
            "properties": {
                "args": {
                    "description": "Arguments for this Task",
                    "type": "object"
                },
                "context": {
                    "description": "Context for this Task",
                    "type": "object"
                },
                "kind": {
                    "description": "The kind of Task; corresponds roughly with a function name",
                    "type": "string",
                    "example": "sayHello"
                },
                "priority": {
                    "description": "The priority of this Task (higher means higher priority)\nIf not passed, defaults to zero (neutral)",
                    "type": "integer"
                },
                "processing_timeout": {
                    "description": "How long a Worker has upon claiming this Task to finish or report back before it gets timed out by the Tasques server\nIf not passed, falls back to a server-side configured default",
                    "type": "string",
                    "example": "30m"
                },
                "queue": {
                    "description": "The queue that a Task will be inserted into",
                    "type": "string",
                    "example": "run-later"
                },
                "retry_times": {
                    "description": "The number of times that a Task will be retried if it fails\nIf not passed, falls back to a server-side configured default",
                    "type": "integer",
                    "example": 10
                },
                "run_at": {
                    "description": "If defined, when this Task should run\nIf not passed, falls back to now.",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "task.Report": {
            "type": "object",
            "required": [
                "at"
            ],
            "properties": {
                "at": {
                    "description": "When the report was filed",
                    "type": "string",
                    "format": "date-time"
                },
                "data": {
                    "description": "Optional report data",
                    "type": "object"
                }
            }
        },
        "task.ReportedData": {
            "$ref": "#/definitions/task.JsonObj"
        },
        "task.Result": {
            "type": "object",
            "required": [
                "at"
            ],
            "properties": {
                "at": {
                    "description": "When the Result was produced",
                    "type": "string",
                    "format": "date-time"
                },
                "failure": {
                    "description": "Failure",
                    "type": "object"
                },
                "success": {
                    "description": "Success",
                    "type": "object"
                }
            }
        },
        "task.Success": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                }
            }
        },
        "task.Task": {
            "type": "object",
            "required": [
                "attempted",
                "id",
                "kind",
                "last_enqueued_at",
                "metadata",
                "priority",
                "processing_timeout",
                "queue",
                "retry_times",
                "run_at",
                "state"
            ],
            "properties": {
                "args": {
                    "description": "Arguments for this Task",
                    "type": "object"
                },
                "attempted": {
                    "description": "The number of times a Task has been attempted",
                    "type": "integer"
                },
                "context": {
                    "description": "Context for this Task",
                    "type": "object"
                },
                "id": {
                    "description": "Unique identifier of a Task",
                    "type": "string"
                },
                "kind": {
                    "description": "The kind of Task; corresponds roughly with a function name",
                    "type": "string",
                    "example": "sayHello"
                },
                "last_claimed": {
                    "description": "Information on when this Task was last claimed by a worker",
                    "type": "object",
                    "$ref": "#/definitions/task.LastClaimed"
                },
                "last_enqueued_at": {
                    "description": "When this Task was last enqueued",
                    "type": "string",
                    "format": "date-time"
                },
                "metadata": {
                    "description": "Metadata (data about data)",
                    "type": "object",
                    "$ref": "#/definitions/common.Metadata"
                },
                "priority": {
                    "description": "The priority of this Task (higher means higher priority)",
                    "type": "integer"
                },
                "processing_timeout": {
                    "description": "How long a Worker has upon claiming this Task to finish or report back before it gets timed out by the Tasques server",
                    "type": "string",
                    "example": "30m"
                },
                "queue": {
                    "description": "The queue the Task is in",
                    "type": "string",
                    "example": "run-later"
                },
                "recurring_task_id": {
                    "description": "Only populated if this is a Task that was spawned/enqueued by a Recurring Task definition",
                    "type": "string"
                },
                "retry_times": {
                    "description": "The number of times that a Task will be retried if it fails",
                    "type": "integer",
                    "example": 10
                },
                "run_at": {
                    "description": "When this Task should run",
                    "type": "string",
                    "format": "date-time"
                },
                "state": {
                    "description": "The state of a Task",
                    "type": "string",
                    "example": "queued"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}