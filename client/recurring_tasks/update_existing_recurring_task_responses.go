// Code generated by go-swagger; DO NOT EDIT.

package recurring_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/lloydmeta/tasques/models"
)

// UpdateExistingRecurringTaskReader is a Reader for the UpdateExistingRecurringTask structure.
type UpdateExistingRecurringTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateExistingRecurringTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateExistingRecurringTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUpdateExistingRecurringTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateExistingRecurringTaskOK creates a UpdateExistingRecurringTaskOK with default headers values
func NewUpdateExistingRecurringTaskOK() *UpdateExistingRecurringTaskOK {
	return &UpdateExistingRecurringTaskOK{}
}

/*UpdateExistingRecurringTaskOK handles this case with default header values.

OK
*/
type UpdateExistingRecurringTaskOK struct {
	Payload *models.RecurringTask
}

func (o *UpdateExistingRecurringTaskOK) Error() string {
	return fmt.Sprintf("[PUT /recurring_tasques/{id}][%d] updateExistingRecurringTaskOK  %+v", 200, o.Payload)
}

func (o *UpdateExistingRecurringTaskOK) GetPayload() *models.RecurringTask {
	return o.Payload
}

func (o *UpdateExistingRecurringTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RecurringTask)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExistingRecurringTaskNotFound creates a UpdateExistingRecurringTaskNotFound with default headers values
func NewUpdateExistingRecurringTaskNotFound() *UpdateExistingRecurringTaskNotFound {
	return &UpdateExistingRecurringTaskNotFound{}
}

/*UpdateExistingRecurringTaskNotFound handles this case with default header values.

Recurring Task does not exist
*/
type UpdateExistingRecurringTaskNotFound struct {
	Payload *models.CommonBody
}

func (o *UpdateExistingRecurringTaskNotFound) Error() string {
	return fmt.Sprintf("[PUT /recurring_tasques/{id}][%d] updateExistingRecurringTaskNotFound  %+v", 404, o.Payload)
}

func (o *UpdateExistingRecurringTaskNotFound) GetPayload() *models.CommonBody {
	return o.Payload
}

func (o *UpdateExistingRecurringTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
