// Code generated by go-swagger; DO NOT EDIT.

package recurring_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/lloydmeta/tasques/models"
)

// NewCreateRecurringTaskParams creates a new CreateRecurringTaskParams object
// with the default values initialized.
func NewCreateRecurringTaskParams() *CreateRecurringTaskParams {
	var ()
	return &CreateRecurringTaskParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateRecurringTaskParamsWithTimeout creates a new CreateRecurringTaskParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateRecurringTaskParamsWithTimeout(timeout time.Duration) *CreateRecurringTaskParams {
	var ()
	return &CreateRecurringTaskParams{

		timeout: timeout,
	}
}

// NewCreateRecurringTaskParamsWithContext creates a new CreateRecurringTaskParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateRecurringTaskParamsWithContext(ctx context.Context) *CreateRecurringTaskParams {
	var ()
	return &CreateRecurringTaskParams{

		Context: ctx,
	}
}

// NewCreateRecurringTaskParamsWithHTTPClient creates a new CreateRecurringTaskParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateRecurringTaskParamsWithHTTPClient(client *http.Client) *CreateRecurringTaskParams {
	var ()
	return &CreateRecurringTaskParams{
		HTTPClient: client,
	}
}

/*CreateRecurringTaskParams contains all the parameters to send to the API endpoint
for the create recurring task operation typically these are written to a http.Request
*/
type CreateRecurringTaskParams struct {

	/*NewRecurringTask
	  The request body

	*/
	NewRecurringTask *models.RecurringNewTask

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create recurring task params
func (o *CreateRecurringTaskParams) WithTimeout(timeout time.Duration) *CreateRecurringTaskParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create recurring task params
func (o *CreateRecurringTaskParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create recurring task params
func (o *CreateRecurringTaskParams) WithContext(ctx context.Context) *CreateRecurringTaskParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create recurring task params
func (o *CreateRecurringTaskParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create recurring task params
func (o *CreateRecurringTaskParams) WithHTTPClient(client *http.Client) *CreateRecurringTaskParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create recurring task params
func (o *CreateRecurringTaskParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNewRecurringTask adds the newRecurringTask to the create recurring task params
func (o *CreateRecurringTaskParams) WithNewRecurringTask(newRecurringTask *models.RecurringNewTask) *CreateRecurringTaskParams {
	o.SetNewRecurringTask(newRecurringTask)
	return o
}

// SetNewRecurringTask adds the newRecurringTask to the create recurring task params
func (o *CreateRecurringTaskParams) SetNewRecurringTask(newRecurringTask *models.RecurringNewTask) {
	o.NewRecurringTask = newRecurringTask
}

// WriteToRequest writes these params to a swagger request
func (o *CreateRecurringTaskParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NewRecurringTask != nil {
		if err := r.SetBodyParam(o.NewRecurringTask); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
