// Code generated by go-swagger; DO NOT EDIT.

package recurring_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/lloydmeta/tasques/models"
)

// CreateRecurringTaskReader is a Reader for the CreateRecurringTask structure.
type CreateRecurringTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRecurringTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateRecurringTaskCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateRecurringTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateRecurringTaskConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateRecurringTaskCreated creates a CreateRecurringTaskCreated with default headers values
func NewCreateRecurringTaskCreated() *CreateRecurringTaskCreated {
	return &CreateRecurringTaskCreated{}
}

/*CreateRecurringTaskCreated handles this case with default header values.

Created
*/
type CreateRecurringTaskCreated struct {
	Payload *models.RecurringTask
}

func (o *CreateRecurringTaskCreated) Error() string {
	return fmt.Sprintf("[POST /recurring_tasques][%d] createRecurringTaskCreated  %+v", 201, o.Payload)
}

func (o *CreateRecurringTaskCreated) GetPayload() *models.RecurringTask {
	return o.Payload
}

func (o *CreateRecurringTaskCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RecurringTask)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRecurringTaskBadRequest creates a CreateRecurringTaskBadRequest with default headers values
func NewCreateRecurringTaskBadRequest() *CreateRecurringTaskBadRequest {
	return &CreateRecurringTaskBadRequest{}
}

/*CreateRecurringTaskBadRequest handles this case with default header values.

Invalid JSON
*/
type CreateRecurringTaskBadRequest struct {
	Payload *models.CommonBody
}

func (o *CreateRecurringTaskBadRequest) Error() string {
	return fmt.Sprintf("[POST /recurring_tasques][%d] createRecurringTaskBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRecurringTaskBadRequest) GetPayload() *models.CommonBody {
	return o.Payload
}

func (o *CreateRecurringTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRecurringTaskConflict creates a CreateRecurringTaskConflict with default headers values
func NewCreateRecurringTaskConflict() *CreateRecurringTaskConflict {
	return &CreateRecurringTaskConflict{}
}

/*CreateRecurringTaskConflict handles this case with default header values.

Id in use
*/
type CreateRecurringTaskConflict struct {
	Payload *models.CommonBody
}

func (o *CreateRecurringTaskConflict) Error() string {
	return fmt.Sprintf("[POST /recurring_tasques][%d] createRecurringTaskConflict  %+v", 409, o.Payload)
}

func (o *CreateRecurringTaskConflict) GetPayload() *models.CommonBody {
	return o.Payload
}

func (o *CreateRecurringTaskConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommonBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
